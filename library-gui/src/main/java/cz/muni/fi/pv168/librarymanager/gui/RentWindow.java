/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.pv168.librarymanager.gui;

import cz.muni.fi.pv168.librarymanager.backend.Book;
import cz.muni.fi.pv168.librarymanager.backend.Client;
import cz.muni.fi.pv168.librarymanager.backend.Rent;
import cz.muni.fi.pv168.librarymanager.backend.Rent;
import cz.muni.fi.pv168.librarymanager.backend.RentManager;
import cz.muni.fi.pv168.librarymanager.backend.RentManagerImpl;
import java.awt.Window;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import static java.time.Month.MARCH;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.DataSource;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.apache.commons.dbcp2.BasicDataSource;

/**
 *
 * @author Skylar
 */
public class RentWindow extends javax.swing.JPanel {

    private String action;
    private Rent rent;
    private ResourceBundle bundle;
    private JTable table;
    private DataSource dataSource;

    public RentWindow(String action, Rent rent, ResourceBundle bundle,
            JTable table) {
        this.action = action;
        this.rent = rent;
        this.bundle = bundle;
        this.table = table;
        initComponents();
        switch (action) {
            case "add":
                jLabelRentWindow.setText(bundle.getString("newRent"));
                break;
            case "edit":
                jLabelRentWindow.setText(bundle.getString("editRent"));
                setTextsFromRents(rent);
                break;
            /*case "filter": 
                jLabel1.setText(texts.getString("filterCustomers"));
                setTextsFromCustomer(customer);
                break;                */
        }

        dataSource = setDataSource();
        initComponents();

        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        DataSourceSwingWorker dataSourceSwingWorker = new DataSourceSwingWorker();
        dataSourceSwingWorker.execute();
    }

    private DataSource setDataSource() {
        Properties dbconf = new Properties();
        try {
            dbconf.load(MainFrame.class.getResourceAsStream("/dbconf.properties"));
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }

        BasicDataSource ds = new BasicDataSource();
        ds.setUrl(dbconf.getProperty("jdbc.url"));
        ds.setUsername(dbconf.getProperty("jdbc.user"));
        ds.setPassword(dbconf.getProperty("jdbc.password"));

        try (Connection con = ds.getConnection()) {
            DatabaseMetaData dbmd = con.getMetaData();
            ResultSet rs = dbmd.getTables(null, null, "BOOK", null);
            if (!rs.next()) {
                StringBuilder sb = new StringBuilder("");
                for (String line : Files.readAllLines(Paths.get("src", "main",
                        "resources", "createTables.sql"))) {
                    if (line.trim().isEmpty()) {
                        continue;
                    }
                    sb.append(line.trim());
                    if (line.endsWith(";")) {
                        sb.deleteCharAt(sb.length() - 1);
                        try (PreparedStatement st1 = con.prepareStatement(sb.toString())) {
                            st1.execute();
                        }
                        sb.setLength(0);
                    }
                }
            }
        } catch (SQLException | IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ds;
    }

    private class DataSourceSwingWorker extends SwingWorker<DataSource, Void> {

        @Override
        protected DataSource doInBackground() throws Exception {
            return setDataSource();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabelRentWindow = new javax.swing.JLabel();

        jTable1.setModel(new BookTableModel(dataSource));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new ClientTableModel(dataSource));
        jScrollPane2.setViewportView(jTable2);

        jLabel2.setText("Number of months:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        jComboBox1.setSelectedIndex(1);

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabelRentWindow.setText("Add new rent:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(252, 252, 252)
                                .addComponent(jLabelRentWindow))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelRentWindow)
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Window win = SwingUtilities.getWindowAncestor(this);
        win.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        switch (action) {
            case "add":
                addRent();
                break;
            case "edit":
                editRent();
                break;
//            case "filter": 
            //              filterCustomer();
            //            break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelRentWindow;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    private void setTextsFromRents(Rent rent) {
        //Book book = ((BookTableModel) jTable1.getModel()).getSelectedBook(jTable1.getSelectedRow());
        //Client client = ((ClientTableModel) jTable2.getModel()).getSelectedClient(jTable2.getSelectedRow());
        jTable1.setModel(jTable1.getModel());
        jTable2.setModel(jTable2.getModel());
        jComboBox1.setSelectedItem(rent.getStartDay());
        jComboBox1.setSelectedItem(rent.getEndDay());
    }

    private List<String> checkInputs() {
        List<String> incorrectInputs = new ArrayList<>();
        if (jTable1.getSelectedRow() == -1) {
            incorrectInputs.add("Vyberte knihu");
        }
        if (jTable2.getSelectedRow() == -1) {
            incorrectInputs.add("Vyberte klienta");
        }
        return incorrectInputs;

    }

    private void fillUpRentFromTextInput() {
        Book book = ((BookTableModel) jTable1.getModel()).getSelectedBook(jTable1.getSelectedRow());
        Client client = ((ClientTableModel) jTable2.getModel()).getSelectedClient(jTable2.getSelectedRow());
        rent.setStartDay(LocalDate.now());
        rent.setEndDay(LocalDate.now().plusMonths(jComboBox1.getSelectedIndex() + 1));
        rent.setBook(book);
        rent.setClient(client);
    }

    private void editRent() {
        List<String> incorrectInputs = checkInputs();
        if (!incorrectInputs.isEmpty()) {
            JOptionPane.showMessageDialog(null, bundle.getString("fillUp") + ": "
                    + incorrectInputs.toString(), bundle.getString("incorrectInput"),
                    JOptionPane.DEFAULT_OPTION);
            return;
        }

        fillUpRentFromTextInput();
        int selectedRow = table.getSelectedRow();
        ((RentTableModel) table.getModel()).updateRent(rent, selectedRow);
        Window win = SwingUtilities.getWindowAncestor(this);
        win.dispose();

    }

    private void addRent() {
        rent = new Rent();
        List<String> incorrectInputs = checkInputs();
        if (!incorrectInputs.isEmpty()) {
            JOptionPane.showMessageDialog(null, bundle.getString("fillUp") + ": "
                    + incorrectInputs.toString(), bundle.getString("incorrectInput"),
                    JOptionPane.DEFAULT_OPTION);
            return;
        }

        fillUpRentFromTextInput();

        ((RentTableModel) table.getModel()).addRent(rent);
        Window win = SwingUtilities.getWindowAncestor(this);
        win.dispose();
    }
}
