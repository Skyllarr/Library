package cz.muni.fi.pv168.librarymanager.gui;

import cz.muni.fi.pv168.librarymanager.backend.Book;
import cz.muni.fi.pv168.librarymanager.backend.Client;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Properties;
import java.util.concurrent.ExecutionException;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.DataSource;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;
import org.apache.commons.dbcp2.BasicDataSource;

/**
 * @author Josef Pavelec <jospavelec@gmail.com>
 */
public class MainFrame extends javax.swing.JFrame {

    private final ResourceBundle bundle = ResourceBundle.getBundle("Bundle");
    private DataSource dataSource;

//    private final ResourceBundle bundle = null;

    public MainFrame() {
        DataSourceSwingWorker dataSourceSwingWorker = new DataSourceSwingWorker();
        dataSourceSwingWorker.execute();

    }

    private class DataSourceSwingWorker extends SwingWorker<DataSource, Void> {

        @Override
        protected DataSource doInBackground() throws Exception {
            return setDataSource();
        }

        @Override
        protected void done() {
            try {
                dataSource = get();
                initComponents();

                jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                jTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                jTable3.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            } catch (ExecutionException ex) {
                JOptionPane.showMessageDialog(null,
                        "Connection to database failed, aplication is closing.",
                        "Database error",
                        JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            } catch (InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        }
    }

    private DataSource setDataSource() {
        Properties dbconf = new Properties();
        try {
            dbconf.load(MainFrame.class.getResourceAsStream("/dbconf.properties"));
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }

        BasicDataSource ds = new BasicDataSource();
        ds.setUrl(dbconf.getProperty("jdbc.url"));
        ds.setUsername(dbconf.getProperty("jdbc.user"));
        ds.setPassword(dbconf.getProperty("jdbc.password"));
        
        try (Connection con = ds.getConnection()) {
            DatabaseMetaData dbmd = con.getMetaData();
            ResultSet rs = dbmd.getTables(null, null, "BOOK", null);
            if (!rs.next()) {
                StringBuilder sb = new StringBuilder("");
                for (String line : Files.readAllLines(Paths.get("src", "main", 
                    "resources", "createTables.sql"))) {
                    if (line.trim().isEmpty()) {
                        continue;
                    }
                    sb.append(line.trim());
                    if (line.endsWith(";")) {
                        sb.deleteCharAt(sb.length() - 1);
                        try (PreparedStatement st1 = con.prepareStatement(sb.toString())) {
                            st1.execute();
                        }
                        sb.setLength(0);
                    }
                }
            }
        } catch (SQLException|IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ds;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButtonFilter = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 400));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new ClientTableModel(dataSource));
        jScrollPane1.setViewportView(jTable1);

        jTabbedPane1.addTab("Clients", jScrollPane1);

        jTable2.setAutoCreateRowSorter(true);
        jTable2.setModel(new BookTableModel(dataSource));
        jScrollPane2.setViewportView(jTable2);

        jTabbedPane1.addTab("Books", jScrollPane2);

        jScrollPane3.setViewportView(jTable3);

        jTabbedPane1.addTab("Rents", jScrollPane3);

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButtonFilter.setText("Filter");
        jButtonFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilterActionPerformed(evt);
            }
        });

        jMenuBar1.setAutoscrolls(true);

        jMenu1.setText("File");

        jMenuItem1.setText("About application");
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Quit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Action");

        jMenuItem3.setText("Add");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Edit selected");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Delete selected");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonFilter)
                .addGap(11, 11, 11))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFilter)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        switch(jTabbedPane1.getSelectedIndex()){
            case 0: 
                addJDialog(0);
                break;
            case 1:
                addJDialog(1);
                break;
            case 2:
                addJDialog(2);
                break;
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void addJDialog(int tabbedPaneIndex) { //0=car,1=customer,2=lease
        JDialog jDialog = new JDialog(this, true);
        switch(tabbedPaneIndex) {
            case 0: //car pane
                //jDialog.setTitle(texts.getString("addCar"));
                jDialog.setTitle(bundle.getString("addClientTitle"));
                jDialog.getContentPane().add(new ClientWindow("add",null,bundle,jTable1));
                break;
            case 1: //customer pane
                jDialog.setTitle(bundle.getString("addBookTitle"));
                jDialog.getContentPane().add(new BookWindow("add",null,bundle,jTable2));
                break;
            /*case 2: //lease pane
                jDialog.setTitle(texts.getString("addLease"));
                jDialog.getContentPane().add(new LeasePopUp("add",null,texts,jTable3,dataSource));
                break;                        */
        }

        jDialog.pack();
        jDialog.setLocationRelativeTo(null);
        jDialog.setResizable(false);
        jDialog.setVisible(true);
    }
    
    private void editActionPerformed(java.awt.event.ActionEvent evt) {                                         
        switch(jTabbedPane1.getSelectedIndex()){
            case 0: //client panel
                int carSelectedRow = jTable1.getSelectedRow();
                if(carSelectedRow == -1) //no client selected
                    return;                
                editJDialog(0,carSelectedRow);
                break;
            case 1: //book panel              
                int customerSelectedRow = jTable2.getSelectedRow();
                if(customerSelectedRow == -1) //no customer selected
                    return; 
                editJDialog(1,customerSelectedRow);
                break;
            case 2: //rent panel
                int leaseSelectedRow = jTable3.getSelectedRow();
                if(leaseSelectedRow == -1) //no lease selected
                    return;
                //newEditJDialog(2,leaseSelectedRow);
                break;
        }
    }
    
    private void editJDialog(int tabbedPaneIndex, int rowIndex) {
        JDialog jDialog = new JDialog(this,true);
        switch(tabbedPaneIndex){
            case 0: //car pane
                //jDialog.setTitle(texts.getString("editCar"));
                jDialog.setTitle(bundle.getString("editClient"));
                jDialog.getContentPane().add(new ClientWindow("edit",
                        ((ClientTableModel)jTable1.getModel()).getSelectedClient(rowIndex),
                        bundle,jTable1));
                break;
            case 1: //customer pane
                jDialog.setTitle(bundle.getString("editBook"));
                jDialog.getContentPane().add(new BookWindow("edit",
                        ((BookTableModel)jTable2.getModel()).getSelectedBook(rowIndex),
                        bundle,jTable2));
                break;
            /*case 2: //lease pane
                jDialog.setTitle(texts.getString("editLease"));                                                
                jDialog.getContentPane().add(new LeasePopUp("edit",
                        ((LeaseTableModel)jTable3.getModel()).getSelectedLease(rowIndex),
                        texts,jTable3,dataSource));
                break;     */                   
        }
   
        jDialog.pack();
        jDialog.setLocationRelativeTo(null);
        jDialog.setResizable(false);
        jDialog.setVisible(true);
    }
    
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {
        //String[] options = new String[]{texts.getString("ok"),texts.getString("cancel")}; 
        String[] options = new String[]{"Ok","Cancel"};
        int row, choice;
        switch(jTabbedPane1.getSelectedIndex()){
            case 0: //client panel
                choice = JOptionPane.showOptionDialog(null,
                        bundle.getString("deleteClientMessage"),
                        bundle.getString("deleteClient"),
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE,
                        null,
                        options,
                        options[1]);
                if(choice==0){
                    //delete from list of clients in clientTableModel
                    Client client = ((ClientTableModel)jTable1.getModel()).getSelectedClient(jTable1.getSelectedRow());
                    ((ClientTableModel)jTable1.getModel()).deleteClient(jTable1.getSelectedRow());
                    //add delete all rents wit client
                    //((LeaseTableModel)jTable3.getModel()).deleteCarWithId(c.getId());
                    //delete from database
                    
                }
                break;
            case 1: //customer pane
                choice = JOptionPane.showOptionDialog(null,
                        bundle.getString("deleteBookMessage"),
                        bundle.getString("deleteBook"),
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE,
                        null,
                        options,
                        options[1]);
                if(choice==0){
                    Book book = ((BookTableModel)jTable2.getModel()).getSelectedBook(jTable2.getSelectedRow());
                    ((BookTableModel)jTable2.getModel()).deleteBook(jTable2.getSelectedRow());
                }
                break;
            /*case 2: //lease pane
                row = jTable3.getSelectedRow();
                Lease l = ((LeaseTableModel)jTable3.getModel()).getSelectedLease(row);
                choice = JOptionPane.showOptionDialog(null,
                        texts.getString("deleteLeaseMessage"),
                        texts.getString("delete"),
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE,
                        null,
                        options,
                        options[1]);
                if(choice==0)
                    ((LeaseTableModel)jTable3.getModel()).deleteLease(jTable3.getSelectedRow());
                break;*/
        }
    }


    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButtonFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilterActionPerformed
        //JOptionPane.showMessageDialog(null, "AHOJ");
    }//GEN-LAST:event_jButtonFilterActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        editActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        deleteActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFilter;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
